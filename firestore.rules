rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
  	function isAdmin(){
   		return request.auth!=null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin;
    }
  	function isAuthenticated(){
   		return request.auth!=null;
    }
    function documentFieldsCheckOut(requiredFields, optionalFields){
      let allFields = requiredFields.concat(optionalFields);
      return request.resource.data.keys().hasAll(requiredFields) && request.resource.data.keys().hasOnly(allFields);
    }
    function editOnlyChangesField(allowedFields){
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly(allowedFields);
    }
    function userFieldsTypeValidate(docData) {
     return docData.uid is string &&
          docData.about is string &&
          docData.batch is string &&
          docData.branch is string &&
          docData.contact is string &&
          docData.cvLink is string &&
          docData.email is string &&
          docData.fbId is string &&
          docData.instaId is string &&
          docData.isAdmin is bool &&
          docData.isMember is bool &&
          docData.linkedinId is string &&
          docData.name is string &&
          docData.position is string &&
          docData.profileImageUrl is string &&
          docData.quote is string;
  }
    function projectFieldsTypeValidate(docData) {
      return docData.date is string &&
        docData.description is string &&
        docData.fileUrl is string &&
        docData.link is string &&
        docData.name is string &&
        docData.progress is string &&
        docData.teamMembers is string;
    }
  
  //Collection Access Rules
    match /users/{userId}{
      allow read;
      allow create: if isAuthenticated() && ( (request.resource.data.uid == request.auth.uid) && (userId == request.auth.uid) ) && documentFieldsCheckOut(["uid","about","batch","branch","contact","cvLink","email","fbId","instaId","interests","isAdmin","isMember","linkedinId","name","position","profileImageUrl","quote"],[]) && userFieldsTypeValidate(request.resource.data);
      allow update: if isAuthenticated() && (isAdmin() || userId == request.auth.uid) && editOnlyChangesField(["about","batch","branch","contact","cvLink","fbId","instaId","interests","linkedinId","name","position","profileImageUrl","quote"]) && userFieldsTypeValidate(request.resource.data);
    }
    
    match /currentTeam/{singleId}{
      allow read;
      allow write:if false;
    }
    
    match /contributors/{contributorsId}{
      allow read;
      allow create: if isAdmin() && documentFieldsCheckOut(["amount","date","description","name","representativeImg"],[]);
      allow update:if isAdmin() && editOnlyChangesField(["amount","date","description","name","representativeImg"]);
    }
    match /feedbacks/{feedbacksId}{
      allow read: if isAdmin();
      allow create: if documentFieldsCheckOut(["dateTime","feedback","isMember"],[]);
      allow update: if false;
    }
    
    match /projects/{projectsId}{
      allow read;
      allow create: if isAdmin() && documentFieldsCheckOut(["date","description","fileUrl","link","name","progress","teamMembers"],[]) && projectFieldsTypeValidate(request.resource.data);
      allow update: if isAdmin() && editOnlyChangesField(["date","description","fileUrl","link","name","progress","teamMembers"]) && projectFieldsTypeValidate(request.resource.data);
    }
    
    match /pushTokens/{pushTokensId}{
      allow read: if isAdmin();
      allow create,update: if documentFieldsCheckOut(["androidId","createdAt","deviceToken","platform"],[]);
    }
    
    match /teams/{teamsId}{
      allow read;
      allow create,update : if false;
    }
    
    match /tutorials/{tutorialsId}{
    	allow read;
    	allow create,update : if false;
    }
    match /notifications/{notificationsId}{
    	allow read;
    	allow create: if isAdmin() && documentFieldsCheckOut(["date","link","msg","title"],[]);
      allow update: if isAdmin() && editOnlyChangesField(["date","link","msg","title"]);
      allow delete : if isAdmin();
    }
    match /events/{eventsId}{
    	allow read;
    	allow create: if isAdmin() && documentFieldsCheckOut(["date","details","endTime","eventName","place","posterURL","regFormLink","startTime"],[]);
      allow update: if isAdmin() && editOnlyChangesField(["date","details","endTime","eventName","place","posterURL","regFormLink","startTime"]);
      allow delete: if isAdmin();
    }
    match /downloads/{downloadsId}{
    	allow read;
    	allow create,update : if isAdmin();
    }
    match /news/{newsId}{
    	allow read;
    	allow create,update : if isAdmin();
    }
    match /robocon/{roboconId}{
    	allow read;
    	allow create,update : if isAdmin();
    }
    match /robovoyage/{robovoyageId}{
    	allow read;
    	allow create,update : if isAdmin();
    }
    match /members/{membersId}{
    	allow read,create,update : if isAdmin();
    }
    match /facultyNumbers/{facultyNumbersId}{
    	allow read,create,update: if isAdmin();
    }
    
    //Overall default Access
    match /{multisegment=**}{
    	allow read: if isAdmin();
      allow create,update,delete: if false;
    }
    
  }
}